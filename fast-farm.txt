// FAST FARM

setInterval(handlePots, 250);
setInterval(attackTarget, 250);
setInterval(loot, 250);

// HEAL + MP
function handlePots() {
    //Heal and restore mana if required
    if (character.hp < 500 && new Date() > parent.next_potion) {
    buy("hpot1",1);
        parent.use('hp');
    }
    if (character.mp < 300 && new Date() > parent.next_potion) {
    buy("mpot1",1);
        parent.use('mp');
    }
}

// ATTACK
function attackTarget() {
    var target = get_targeted_monster();
    if (!target) {
        target = get_closest_monster({m_type_priority:"squigtoad", m_type_secondary:"bee"});
        if (target)
			change_target(target);
        else {
            set_message("No Monsters");
            return;
        }
    }
    
    if (!in_attack_range(target)) {
        move(
            character.real_x+(target.real_x-character.real_x)/2,
            character.real_y+(target.real_y-character.real_y)/2
            );
    }
    else if (can_attack(target)) {
        set_message("Attacking");
        attack(target);
    }
}

// CUSTOM MTYPE TARGETING
function get_closest_monster(args) {
    //args:
    // m_type_priority - the monster you want to attack (bosses)
    // m_type_secondary -the monster you attack when your boss is not there
    // target: Only return monsters that target this "name" or player object
    // no_target: Only pick monsters that don't have any target
    var min_d=999999,target=null;
    
    if(args.m_type_priority == null && args.m_type_secondary == null){return null;}
    if(args && args.target && args.target.name) args.target=args.target.name;


    for(id in parent.entities){
        var current=parent.entities[id];
        if(current.type!="monster" || current.dead) continue;
        if(current.target!=null && current.target!=character.name) continue;
        var c_dist=parent.distance(character,current);
        if(current.mtype == args.m_type_priority){
            return current;
        }
        else if(c_dist<min_d && current.mtype == args.m_type_secondary){
            min_d=c_dist;
            target=current;
        }
        
    }
    return target;
}